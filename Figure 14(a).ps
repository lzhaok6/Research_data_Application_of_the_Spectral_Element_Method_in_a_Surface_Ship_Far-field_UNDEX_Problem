%!PS-Adobe-3.0
%APL_DSC_Encoding: UTF8
%APLProducer: (Version 10.14.5 (Build 18F132) Quartz PS Context)
%%Title: (Figure 14\(a\).pdf)
%%Creator: (PDF Expert: cgpdftops CUPS filter)
%%CreationDate: (Thursday, July 11 2019 22:44:13 EDT)
%%For: (Zhaokuan Lu)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%PageOrder: Ascend
%RBINumCopies: 1
%%Pages: (atend)
%%BoundingBox: (atend)
%%EndComments
userdict/dscInfo 5 dict dup begin
/Title(Figure 14\(a\).pdf)def
/Creator(PDF Expert: cgpdftops CUPS filter)def
/CreationDate(Thursday, July 11 2019 22:44:13 EDT)def
/For(Zhaokuan Lu)def
/Pages 1 def
end put
%%BeginProlog
%%BeginFile: lw8_errorhandler-2.0
/currentpacking where 
	{ pop /oldpack currentpacking def /setpacking where
		{
			pop false setpacking
		}if
	}if
/$brkpage 64 dict def $brkpage begin
/prnt
 {dup type/stringtype ne{=string cvs}if dup length 6 mul/tx exch def/ty 10 def
  currentpoint/toy exch def/tox exch def 1 setgray newpath
  tox toy 2 sub moveto 0 ty rlineto tx 0 rlineto 0 ty neg rlineto
  closepath fill tox toy moveto 0 setgray show}bind def
/nl{currentpoint exch pop lmargin exch moveto 0 -10 rmoveto}def
/=={/cp 0 def typeprint nl}def
/typeprint{dup type exec}readonly def
/lmargin 72 def
/rmargin 72 def
/tprint
   {dup length cp add rmargin gt{nl/cp 0 def}if
    dup length cp add/cp exch def prnt}readonly def
/cvsprint{=string cvs tprint( )tprint}readonly def
/integertype{cvsprint}readonly def
/realtype{cvsprint}readonly def
/booleantype{cvsprint}readonly def
/operatortype{(--)tprint =string cvs tprint(-- )tprint}readonly def
/marktype{pop(-mark- )tprint}readonly def
/dicttype{pop(-dictionary- )tprint}readonly def
/nulltype{pop(-null- )tprint}readonly def
/filetype{pop(-filestream- )tprint}readonly def
/savetype{pop(-savelevel- )tprint}readonly def
/fonttype{pop(-fontid- )tprint}readonly def
/nametype{dup xcheck not{(/)tprint}if cvsprint}readonly def
/stringtype
 {dup rcheck{(\()tprint tprint(\))tprint}{pop(-string- )tprint}ifelse
 }readonly def
/arraytype
 {dup rcheck{dup xcheck
  {({)tprint{typeprint}forall(})tprint}
  {([)tprint{typeprint}forall(])tprint}ifelse}{pop(-array- )tprint}ifelse
 }readonly def
/packedarraytype
 {dup rcheck{dup xcheck
  {({)tprint{typeprint}forall(})tprint}
  {([)tprint{typeprint}forall(])tprint}ifelse}{pop(-packedarray- )tprint}ifelse
 }readonly def
/courier/Courier findfont 10 scalefont def
end %$brkpage
errordict/handleerror
 {systemdict begin $error begin $brkpage begin newerror
   {/newerror false store 
    vmstatus pop pop 0 ne{grestoreall}if initgraphics courier setfont
    lmargin 720 moveto(ERROR: )prnt errorname prnt
    nl(OFFENDING COMMAND: )prnt/command load prnt
 	$error/ostack known{
	$error/ostack get type dup/arraytype eq exch /packedarraytype eq or
   {nl nl(STACK:)prnt nl nl $error/ostack get aload length{==}repeat}if}if
    systemdict/showpage get exec(%%[ Error: )print
    errorname =print(; OffendingCommand: )print/command 
    load =print( ]%%)= flush}if end end end}
dup 0 systemdict put dup 4 $brkpage put bind readonly put
/currentpacking where 
	{ pop  /setpacking where
		{
			pop oldpack setpacking
		}if
	}if
%%EndFile
%%BeginFile: cg-pdf.ps
%%Copyright: Copyright 2000-2004 Apple Computer Incorporated.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
%/as/ashow
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
%dup (number of ld's = )print == flush	% *** how many 
{ld}repeat pop
/SC{	% CSname
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		% pop the ctm: our gstate ctm on host is now identity
/cm {cmmtx astore CM concat}bd	% reset the matrix and then concat
/W{clip newpath}bd
/W*{eoclip newpath}bd

statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	% pop off the search results
    true
}{
    pop	% previous search result
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse

{	% HP is the product: we use this method of stroking because of a bug in their clone printers with certain T3 fonts
    { 
	{ % charCode Wx Wy
	    pop pop % charCode
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		% dont' bind
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd

/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd

/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	% don't use F
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd

/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	% leave room for imagetype and imagematrix
dict begin
{def} repeat
pop		% remove mark
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
% currentdict on stack
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	% pop imagedict from dict stack
}bd

/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ % x y
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ % x y
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        % x y
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		% don't bind sop
/cp_proc/x_proc ld 	% default moveto proc is for xwidths only
/base_charpath		% string array
{
    /t_array xs
    /t_i 0 def
    { % char
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		% default sop is stroke. Done here so we don't bind in /base_charpath 

% default sop is stroke
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ % newname encoding fontname
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ % newname fontname
findfont dup length dict copy definefont pop
}bd

L3? dup dup{save exch}if

% languagelevel2 ONLY code goes here

/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def

/setupFunEval % funDict -- 	% this calculates and sets up a function dict for evaulation.
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   % precompute the range data needed to map a sample value from the table to a range value
		    % this data looks like [ range0mul range0min range1mul range1min ... rangeN-1mul rangeN-1min ]
	[ 
	    0 1 nRange 1 sub
	    { % index
		    2 mul/nDim2 xd		% 2*dimension# we are dealing with
		    Range nDim2 get		% ymin
		    Range nDim2 1 add get	% ymin ymax 
		    1 index sub			% ymin (ymax-ymin)
						% xmin = 0, xmax = 255 (2^bitspersample - 1)
		    255 div			% ymin (ymax-ymin)/(xmax - xmin)
		    exch			% (ymax-ymin)/(xmax - xmin) ymin
	    }for
	]store
    end
}bd

/FunEval % val1 fundict -> comp1 comp2 ... compN
{
    begin
	% the value passed in is the base index into the table
	nRange mul /val xd	% compute the actual index to the table
				% since there are nRange entries per base index
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd % dim
	    val	% base value to use to do our lookup
	    add DataSource exch get %  lookedupval
	    mulRange nDim2 get mul 	% lookedupval*(ymax-ymin)/(xmax-xmin)
	    mulRange nDim2 1 add get % lookedupval*(ymax-ymin)/(xmax-xmin) ymin
	    add % interpolated result
	}for	% comp1 comp2 ... compN
    end
}bd

/max % a b -> max(a, b)
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd

/sh2
{	% emulation of shading type 2. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 x1 y1
	3 index 3 index translate	% origin is now at beginning point of shading
					% x0 y0 x1 y1
	3 -1 roll sub	% x0 x1 y1-y0
	3 1 roll exch 	% y1-y0 x1 x0
	sub				% y1-y0 x1-x0
	2 copy
	dup mul exch dup mul add sqrt	% length of segment between two points
	dup
	scale  
	atan	% atan (dy/dx)
	%dup (rotation angle = )print ==
	rotate		% now line between 0,0 and 1,0 is the line perpendicular to which the axial lines are drawn					
	
	/Function load setupFunEval	% may need to setup function dictionary by calling setupFunEval
	
	% this is now specific to axial shadings. Compute the maximum bounds to fill
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	% paint the rects. The sampling frequency is that of our table
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		% loop Nsteps + 1 times, incrementing the index by 1 each time
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	% pop our function
	grestore	% origin is back to start point
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	% last element
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd

/shp	% this paints our shape for shading type 3
{	% x1 r1 x0 r0 -
	4 copy

	% fill interior arc
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill

	% fill exterior arc
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd

/calcmaxs
{	% calculate maximum distance vector from origin to corner points
	% of bbox
	xmin dup mul ymin dup mul add sqrt		% (xmin2 + ymin2)
	xmax dup mul ymin dup mul add sqrt		% (xmax2 + ymin2)
	xmin dup mul ymax dup mul add sqrt		% (xmin2 + ymax2)
	xmax dup mul ymax dup mul add sqrt		% (xmax2 + ymax2)
	max max max								% maximum value
}bd

/sh3
{	% emulation of shading type 3. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 r1 x1 y1 r2
	5 index 5 index translate	% origin is now at first circle origin
	3 -1 roll 6 -1 roll sub		% y0 r1 y1 r2 dx
	3 -1 roll 5 -1 roll sub		% r1 r2 dx dy
	2 copy dup mul exch dup mul add sqrt
	/dx xs						% r1 r2 dx dy
	2 copy 0 ne exch 0 ne or
	{
		% r1 r2 dx dy
		exch atan rotate	% we are now rotated so dy is zero and positive values of dx move us as expected
	}{
		pop pop
	}ifelse
	% r1 r2		
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	% this is the size of our table minus 1
	/Nsteps xs		% at some point we should optimize this better so NSteps is based on needed steps for the device
	setupFunEval		% may need to setup function dictionary by calling setupFunEval
	% determine the case:
	% case 0: circle1 inside circle2
	% case 1: circle 2 inside circle 1
	% case 2: r1 = r2 
	% case 3: r1 != r2
	dx r2 add r1 lt{
		% circle 2 inside of circle 1
		0 
	}{
		dx r1 add r2 le
		{ % circle 1 inside of circle 2
			1
		}{ % circles don't contain each other
			r1 r2 eq
			{	% equal
				2
			}{ % r1 != r2
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		% sh3tp has the number of our different cases
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs

	% Arc angle atan( sqrt((dx*dx + dy*dy) - dr*dr), dr)
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		

	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	% no need to extend if the radius of the first end is 0
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{	% case 0
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				}
				{	% case 1
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	% case 2
					% r1 == r2, extend 0
					% r3 = r, x3 = -(abs(minx) + r), x1 = 0
				
					% x(i+1) r(i+1) x(i) r(i) shp
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	% case 3
					% no containment, r1 != r2
				
					r2 r1 gt{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1
						r1 neg r2 r1 sub div dx mul	% this is point of beginning circle
						0	% point of ending circle
						shp	% takes x(i+1) r(i+1) x(i) r(i)
					}{	% the first circle is the bigger of the two
						% we find a circle on our line which is outside the bbox in the
						% negative direction
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1 calcmaxs	% 0 r1 maxs
						dup
						% calculating xs: (-(maxs+r2)*x2)/(x2-(r1-r2))
						r2 add dx mul dx r1 r2 sub sub div
						neg				% maxs xs'
						exch 1 index	% xs' maxs xs'
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	% execute the extend at beginning proc for our shading type
		}if
	}if

	% now do the shading
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	% function t(i)
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		% fill interior arc
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		% fill exterior arc
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		% advance to next
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	% pop our function dict

	% handle Extend
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	% no need to extend if the radius of the last end is 0
		{	
			Nsteps/Function load FunEval sc	% last element
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				} 
				{	% r1 == r2, extend 1
					% r3 = r, x3 = (abs(xmax) + r), x1 = dx
					% x(i+1) r(i+1) x(i) r(i) shp
					xmax abs r1 add r1 dx r1 shp
				}	
				{	% no containment, r1 != r2
			
					r2 r1 gt{
						% we find a circle on our line which is outside the bbox in the
						% positive direction
						% x(i+1) r(i+1) x(i) r(i) shp
						calcmaxs dup	% maxs maxs
						% calculating xs: ((maxs+r1)*x2)/(x2-(r2-r1))
						r1 add dx mul dx r2 r1 sub sub div	% maxs xs
						exch 1 index	% xs maxs xs
						exch sub
						dx r2
						shp
					}{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						r1 neg r2 r1 sub div dx mul	% this is point of ending circle
						0		% radius of ending circle
						dx 		% point of starting circle
						r2		% radius of starting circle
						shp
					}ifelse
				}
			}			
			sh3tp get exec	% execute the extend at end proc for our shading type
		}if
	}if
}bd
/sh		% emulation of shfill operator for type 2 and type 3 shadings based on type 0 functions
{	% shadingDict --
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	% shadingtype
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	% llx lly urx ury
					2 index sub				% llx lly urx ury-lly
					3 index					% llx lly urx ury-lly llx
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			% shadingtype
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd

% end of language level 2 ONLY code

{restore}if not dup{save exch}if
% languagelevel3 ONLY code goes here
	L3?{	% we do these loads conditionally or else they will fail on a level 2 printer
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if

%currentdict dup maxlength exch length sub (number of extra slots in md = )print == flush	% *** how many entries are free
end
setpacking
% count 0 ne { pstack(***extras on stack during prolog execution***\n)print flush}if	% *** BARK if anything is left on stack
%%EndFile
%%EndProlog
%%BeginSetup
% Disable CTRL-D as an end-of-file marker...
userdict dup(\004)cvn{}put (\004\004)cvn{}put
[{
%%BeginFeature: *ColorModel RGB
<</cupsColorSpace 19/cupsBitsPerColor 8/cupsColorOrder 0/cupsCompression 0>>setpagedevice
%%EndFeature
} stopped cleartomark
[{
%%BeginFeature: *Duplex None
<</Duplex false>>setpagedevice
%%EndFeature
} stopped cleartomark
[{
%%BeginFeature: *MediaType any
%%EndFeature
} stopped cleartomark
[{
%%BeginFeature: *PageSize Letter
<</PageSize[612.0000 792.0000]/ImagingBBox null/Orientation 0>>setpagedevice
%%EndFeature
} stopped cleartomark
[{
%%BeginFeature: *cupsPrintQuality Normal
<</cupsInteger1 4 /HWResolution[300 300]>>setpagedevice
%%EndFeature
} stopped cleartomark
% x y w h ESPrc - Clip to a rectangle.
userdict/ESPrc/rectclip where{pop/rectclip load}
{{newpath 4 2 roll moveto 1 index 0 rlineto 0 exch rlineto
neg 0 rlineto closepath clip newpath}bind}ifelse put
% x y w h ESPrf - Fill a rectangle.
userdict/ESPrf/rectfill where{pop/rectfill load}
{{gsave newpath 4 2 roll moveto 1 index 0 rlineto 0 exch rlineto
neg 0 rlineto closepath fill grestore}bind}ifelse put
% x y w h ESPrs - Stroke a rectangle.
userdict/ESPrs/rectstroke where{pop/rectstroke load}
{{gsave newpath 4 2 roll moveto 1 index 0 rlineto 0 exch rlineto
neg 0 rlineto closepath stroke grestore}bind}ifelse put
userdict/ESPwl{}bind put
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 612 792
%%BeginPageSetup
612.0 0.0 translate 90 rotate
%%EndPageSetup
cg_md begin
bp
sdmtx
%RBIBeginFontSubset: TAZHPP+Helvetica
%!FontType1-1.0: TAZHPP+Helvetica 1.0000.0.0000
14 dict begin/FontName /TAZHPP+Helvetica def
/PaintType 0 def
/Encoding 256 array 0 1 255{1 index exch/.notdef put}for
dup 33 /hyphen put
dup 34 /three put
dup 35 /two put
dup 36 /one put
dup 37 /zero put
dup 38 /D put
dup 39 /e put
dup 40 /p put
dup 41 /t put
dup 42 /h put
dup 43 /space put
dup 44 /parenleft put
dup 45 /m put
dup 46 /parenright put
dup 47 /five put
dup 48 /y put
dup 49 /n put
dup 50 /a put
dup 51 /i put
dup 52 /c put
dup 53 /C put
dup 54 /o put
dup 55 /d put
dup 56 /s put
dup 57 /k put
dup 58 /g put
dup 59 /slash put
dup 60 /A put
dup 61 /S put
dup 62 /E put
dup 63 /N put
dup 64 /equal put
dup 65 /F put
dup 66 /four put
dup 67 /eight put
readonly def
42/FontType resourcestatus{pop pop false}{true}ifelse
%APLsfntBegin
{currentfile 0(%APLsfntEnd\n)/SubFileDecode filter flushfile}if
/FontType 42 def
/FontMatrix matrix def
/FontBBox[2048 -1947 1 index div -985 2 index div 2961 3 index div 2297 5 -1 roll div]cvx def
/sfnts [<












100000010006B801ADB300000100B801AD401F04000001000410000001001002000001000200000001000002010802004A00B0018DB806008516763F183F123E113946443E113946443E113946443E113946443E113946443E11394660443E11394660443E11394660442B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B18011DB0964B5358B0AA1D59B0324B5358B0FF1D592B2B2B2B2B2B2B2B182B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B74752B2B2B65422B2B4B5279B376706A66456523456023456560234560B08B766818B080622020B16A704565234520B003266062636820B003266165B070236544B06A234420B176664565234520B003266062636820B003266165B066236544B0762344B10066455458B166406544B27640764523614459B36242725D456523456023456560234560B089766818B080622020B172424565234520B003266062636820B003266165B042236544B072234420B1625D4565234520B003266062636820B003266165B05D236544B0622344B1005D455458B15D406544B262406245236144592B2B2B2B456953427374B8019A2045694B20B02853B049515A58B020615944B801A6204569447500
00>] def
/CharStrings 36 dict dup begin
/.notdef 0 def
/space 1 def
/parenleft 2 def
/parenright 3 def
/hyphen 4 def
/slash 5 def
/zero 6 def
/one 7 def
/two 8 def
/three 9 def
/four 10 def
/five 11 def
/eight 12 def
/equal 13 def
/A 14 def
/C 15 def
/D 16 def
/E 17 def
/F 18 def
/N 19 def
/S 20 def
/a 21 def
/c 22 def
/d 23 def
/e 24 def
/g 25 def
/h 26 def
/i 27 def
/k 28 def
/m 29 def
/n 30 def
/o 31 def
/p 32 def
/s 33 def
/t 34 def
/y 35 def
 end readonly def
currentdict dup/FontName get exch definefont pop end
%APLsfntEnd
42/FontType resourcestatus{pop pop true}{false}ifelse
{currentfile 0(%APLT1End\n)/SubFileDecode filter flushfile}if
/FontType 1 def
/FontMatrix [ 0.00048828125 0 0 0.00048828125 0 0 ] def
/FontBBox{-1947 -985 2961 2297}def
/UniqueID 4179358 def
currentdict currentfile eexec
54544758EC884CF30C3CD503CEDBFF3839C47C3C3333173232E3FDBFF439491DB843E1924E63AA7726BBB0485AB56D93D8C0906F647A47162891E73FFC2A9873C4B1EAC5EEBDFFC4D06084FBD84139DF4583C6E259D10699944D1068C9C45667DCCCFB9B7EA01B606435EDCBD273ABAC093D14085CCBAC149BD7382E842CFE0D7FE4FD2EF589A2471F6074A80A8B675C2F7A50D63AC1EF90D787BADD11633CB01CF6EE3B37AAF9078A69AC4740E9B6525D78BBD839551A1CB80DB8682FA5E87591BBD6EE8B946063A2A58D9CA3685AB305495DC5FB5747EB8A9A059C4976C0FE4EEAB1D56FF47F1E9664ED9F4A7DAB763AF92B2F6CF2FA7DEC24710E0B9096E30F772BA7FEA9BDBE496C42ED2CEB58F54E80BDF57CE7B4DB6CCFE7182F43BF93CCA0767AF95D62C5D2C3DC6AE1E6D139F51A2C63432117F1714C5566572EE9967A715420ABDCD1D7BD74F8450B89965FCC81C6ACA565C5F3CCF91D430D1F953E4F1A645300A98DD8C47CD64555F08F422340A85404EAE0D3229C4F9336B9470CACBD6BBF3395104750A915CC6EAAC197668267B8C62D2764C8CD69FD937CA3C924D997A0EDE7964BEB9EA2F92EF70C5E5DA0AA5567765E71F2B911B3C5586B741EEB93F3C73016EC16BFF283758900903D203992EFC8BAFAF13579C602F38C93174D4E3C01712375EA6AD09BB8CBB6B1EDF2EE8AD6EA8A1100B272772E25CD49A11C2BBCE1537891115B66436919C4C60947F480A3767CB2C6AC7EEA7195682BC7FE2D529A41DF58A2732B8527527333B870700375B2B70924FBE2A27610A13D6824D197E739A92ADB5F15AD9F5CFFE2CD24BC300112683149EA4172D43D111970252C1FB3307B5C98DDAF195E7B519B66B7F753EF1C438D4DD113C945D30959B69BAB06D7DE0A885A7BC8F7160CB5D69BF07A6878205636AE9901BCCF7520B06D98E38F63E53C2D9B0C5847E9743E0F625D363EBC46CB3E8F6FB8DA843A108DB500A92652B45A2605BBC9D307A459EC17E025A18336EBC8888A39FA4C30AF3D9E78A49CD0AA7767FF1A4883EA94BD04A3745B932163D9BC817EF4461B0F7675F71984EE933C2B84B91332DECB87375E51D76C277E2ECC7AABC974488FC45B58349872FB61822C480932D79F191842940112756EBE6999C086A71C1AF73E5F9AD450719A03FB1C195910FB502FDC15D7773C17252520942F49AABCC544D1857B5046E1D8C75455A2481D219ACC82D0D066511B83760DBE62774F2765DC3792E887B6FC603217A2535DAF001E69759B644EC409CE03D7B8E1458F75865F764340E98F30FC2FD74C5DEDDCEA3218865E7B3F4D495606846FDB8B0387D8D5AD001368079E9F8DDB872F148B0975A3A0C0DA7317D377EF03C9E082CC1E07A6B5416321C84A66C23DA4F7BB7F53884CDA4FF72D155C94EC857BE0FEC2B1F08AF30DB9

BCCDCDE8C2ABCFE66F5AF46D572EA8E15824D24D8DB93ACB341AFF0FE77B8331FB776899CF9BD276875259D1017B7B24203598C6BCA2405A1F62A30AC70705F0246D8D688C861EE8FB955CF2ED8FEDB062AFA7254240A9E38F95D7807BB3F42347AFA7D71BA5AE86AE15971041DD94EC2DF10A92ABC85CC3E87E3C18C64216E34D4BB14FC51BBBE57A93BC5B9DF054F335D2A2BFD5AB10B57240CC0E60A89347FAF220BC3F4A1F208ED1E09BAA6E2D0F9E45E7DFA54F1B7407704F27A96784BD959FF8B8F4588C8B864A41625B59F05A328283E5EA24ADEEE9C9B7AF6FA2591EEA09DA56409A8353C101AF5BC1C594894B7573B50825EDB1B4726B219C13863B29BC77E7006D09C353B6D3A975DDF433A635B72D3856AF9C66CAD786CE7484B949115ABE7B2B3CE537C66297BD1E588A5C689C5D726FCD9454B973FCAB57327329AF6A8EAE0D27BB9923F53460E3C8AC707B752DAF3182B82580C31F4C6C3F93714027EA109B0734C8C2967D903FB7035D50ADC52EFDB371792A08BA6D5AC235D898CDAB28174EDE41C28BB3012DCD83DCD6DAE6C3F1813583E80F1D811D376DAC1E93209B46D701DF9CDBA13B40CC7295F57DAC3AF82464E2B733CDB6205599B962B7C151EC1199360DF8F7528F8332500A937C84C2BB4886833507C9991FF0D42C0CCB4BFB644963661C85CB4BBB4BC9833199CC54800EB8417F8B800ED44B08A755C650FCBF22B785EA144F4FE63D22B0EC180D7ED903657114AC153F4E879C93DE704006633CAD22BF31646F4B7C3E56C3FD6ACF910966581C88DD4B7DBAE30342CFF5AB9B64B22BB8E655EFBB84381998FD712B138B5C888DAC7895D6AC9CC3FD84FDB3E8812CCD9B83D00500D963F6A6ADAB27FFD0AD7BEF38AA6863E2B9B6AD79B8DD894871327A34CD3BDFD0A17F376E2C7767FA243B934276887D69F3240A2A108E8611D0A875A89DD16F1F32D6F777E754CA29B8ED3585D3278D0370FEB4D8A5D11EE04C0B78B6541408F35E760ABB6F4FEFD649F74FDD552295C1F8793D3A6F60C1D15A359D08E51967BD92FCDC7BB19DA2AFE7FC1CC02ACEE8D51F6D0D7F898B3087AEE31A263955F67950F81ED8C5988B75257973D35735331AB6E016203D03627EFA0B4162BC8C4A96ECE97BAF290B1492082C15BBDA141E77FE8DA2885075AAA74B35E65FE4F380853768AF49ADB26D22E95BE47AD2A732A701BE8E45A386BD2B28693EFD3D25BC13B248EBF50BED7F774196FFC272078F3155CFFFDF18B90925F8BE811DA766E842ABFDA43EDA7AC1506CFA5B5AFE36FB5CF500F039DDC777FF0338955BE90F999C48EFE2AB52A8DCF73CB7777C63F7040EA0D3C68EF7D92CFB4689A0845B98EF1488A773B307D9D75C67229EC1CA854E9B19119C2980C719263EE2C975F03C98BE593DA9EA804AC0F29BDF56FCF070A181

1418C1C3D189F8FF85548235112B318F8C74B2C6F8C3501322D0E70F5EB16F0B3660D39ABFAA0F0F90E8C612072EEFCFAB39FC86AC717FF3E5A56C4C49FA30B132CAB47E3FC4A49A1650D594A88F9A755B83DA198EDA16857CA631D4B83116F61766C764859FD6AC1C50D1AE7B55B24FEB4972E11A64E2DFCC5884048ECFA58EAB1F8CE2402357C936B5A96994C55F8412A59694E183896202ACFBA65DB7A3C557EDEB9CA1F5706DD0CB2360B45E23B662ABE59E7DC489C2D35FAFBAC35D86AF6F436DDE518416BEFEE612C8F2CF48DB976828059FD96B99A853556106C29A56B9C99DD8CCC9C8A82D6E05AB20D9EFD02EEC712BC1D4578809DE38412034E5F0DF625840066A16ED866460D7573654EDCB34CD78647436B741D65BAE47117486ABAA642539F19F3A332103E485146ECCCC57B3A938CF390577FD06E84C52247A512C7CE9C73CBA077D42C5483E482CC292280E77C2EFD7D6B246368F2EBAC5014F817FD7E42571855AA3441F1284DA7AE34321A73DCB23D5719473968D899C57BB263E066F3BAC190EF585A72205F07FEC8FF4AD3577387946B73E78CF103EB2CC93BAC77B162F65AF7FC8B538325ECFE6983E59E411D51B25B54016000174DD716603D8FB68DF43AF0B78C993D8C52D486C1012DA1A6D01388659F9FFA00C2341CF011CEA407DD49CE9FADB0E71CC8063B97F6E866CB939E39D1601F8EA1AB42E3EFFD0E86F05827CEE8E909406355ECB6D2554F5465358F20B329E40E27A74BB212BAAB7D589A2C80BBF48D8ED129746755A902A8D2C1349D061BC0C5CE008704552CE5AC2277A7326C9959174D02864979AC10545D57D3F5E23763B7281EADF5FB2686EEAAA90B8236906A5750F044B87AA75C9ACA1CCF49013582F3B1D35D45453CC818578FB67E47BBF9AF0AA64898E0D8AF95A38A6F6F438EB6EE7FC23A4CA87F88EE324569474D7092539C6F0BBC74FF3FC15C4B1B634E6DA04EAA97EF505407D3F8C0496CF9054410ED2A35CC23B00A74A0FE0621AFBC9AA57E76EEE19506F4801EC8FF3F29A904DCD86E3667683BC82B761B49E7397D2CF370C5158D04080CAB7C97C43CE69C7F6CC30D12C55D0AE5F99AC3D71481A61CF46EC8FD7544306260C79EA1F3E18F0B3DF10216E3613EE34E09C39B858E45F0C55E00AA9DDFB915BBAD03340C8D781323727F2284FEC959F01CC4540892A175352950E86518BD98593DC5706D1B457A74C4DB17B454AFD82711319C42AD7C9D92465CD958AB74669400FEF58CD7A8C05CE26221EF55C5C20302C6DFC7BF162F64EBE62AF04FBB12B1D1ED5983E47F59369B991D0DBEC24E46F066C1E177ADDDFADAE338B1CB95AD65882AA21FABAE76A0028F881A6A3EDEB492F97BDF83D0C4FF0F4EF91523A4BF2BB005E39C630AE336189B61CC013C0E352E34234B9AF188ED7A5DF51
DB56E28F650A8DC274FCA371F4280AC84A9C3D274A7C2D320F6979542178EF13405168A989CD2545385E7FF299A9AEAD01C0432E531F1F075BB7647384F36033EB648B9CA380EBA84CB3BD0E00536F83AC75E5EE410CB7F60CC7F31A3D8C0C341B2835AFAA3B03D7FD90FBB4720A58447C2944D33CA3C60A08F6ECC5775A2770692B2506D06B0B390105C8055CA4DA6C5C5F018D00CD091548BD5BA804F8327BD34C91CCAEBF5AD6D95D73D06404F9A419E05E335BB1C966DBCCF2005BF6D2A56D05CF124D0982F2F0459B8F7AE6103009EAD2C8131C376B37117511716DA6DB091A065B1C3499D8E5BB4EEC6E276CB03B21F6E4E4A6C6306C84E8D973FFD083CF3F624BF80C5E0AE022E49D5BC1DEE7F86CB9576D1BBF180FC2E3EFC7C90A382C04E35DE0806B58D228A7A2C2063464A4F048CDC7831C23FB7BAA0B261BF661F18753F5928FF05A5A339FCB52F6BA184EC478180469CC2404856F37B767BCC8034A57FD7AA8FA7A65B0E5F90216164330E19451EF7DB907D581AA3B180BF8088573D3819CDC03FF2E20989E402124FE4D5EED8F048EE844DCEA45A9660B8A84C63E30D84C160395B8F6F5894440150E7EDB3A895158BED9A9ABDAA35814DEE60F3C83CA72FC060F6F8A60B80F
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark end
%APLT1End
%RBIEndFontSubset
/TAZHPP+Helvetica cguidfix
/F1.1/TAZHPP+Helvetica renmfont
[ /CIEBasedA 5 dict dup begin /WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeA { 
{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 
 exec} bind 
def 
/MatrixA [ 0.9642 1.0000 0.8249 ] def 
/RangeLMN [ 0.0 2.0000 0.0 2.0000 0.0 2.0000 ] def 
/DecodeLMN [ { 0.9857  mul} bind { 1.0000  mul} bind { 1.3202  mul} bind ] def 
end ] /Cs1 exch/ColorSpace dr pop
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ 
{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 
] def 
/MatrixABC [ 0.4124 0.2126 0.0193 0.3576 0.7151 0.1192 0.1805 0.0722 0.9508 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs2 exch/ColorSpace dr pop
%%EndPageSetup
/Cs1 SC
1 sc
q
56.004459 603.49609 m
735.99548 603.49609 l
735.99548 9.6372681 l
56.004459 9.6372681 l
56.004459 603.49609 l
h
W
55 8.5039034 682 594.99219 rc
56.004459 603.49609 m
735.99561 603.49609 l
735.99561 9.6372576 l
56.004459 9.6372576 l
h
f
Q
q
55 8.5039034 682 594.99219 rc
56.004459 603.49609 m
735.99561 603.49609 l
735.99561 9.6372576 l
56.004459 9.6372576 l
h
f
195.3082 105.4716 m
650.20959 105.4716 l
650.20959 559.50659 l
195.3082 559.50659 l
h
f
0.5 w
2 J
1 j
0.149 sc
3.1481071 0 0 -3.1421101 56.004459 603.49609 cm
44.25 158.5 m
188.75 158.5 l
S
44.25 14 m
188.75 14 l
S
44.25 158.5 m
44.25 157.05499 l
S
92.416656 158.5 m
92.416656 157.05499 l
S
140.5833 158.5 m
140.5833 157.05499 l
S
188.75 158.5 m
188.75 157.05499 l
S
44.25 14 m
44.25 15.445 l
S
92.416656 14 m
92.416656 15.445 l
S
140.5833 14 m
140.5833 15.445 l
S
188.75 14 m
188.75 15.445 l
S
3.1481071 0 0 -3.1421101 195.3082 92.903183 cm
/F1.1[ 10 0 0 -10 0 0]sf
-5 10 m
(!")[ 3.330000 0.000000 ] xS
3.1481071 0 0 -3.1421101 346.94199 92.903183 cm
-5 10 m
(!#)[ 3.330000 0.000000 ] xS
3.1481071 0 0 -3.1421101 498.57581 92.903183 cm
-5 10 m
(!$)[ 3.330000 0.000000 ] xS
3.1481071 0 0 -3.1421101 650.20959 92.903183 cm
-3 10 m
(%)s
3.1481071 0 0 -3.1421101 422.75909 50.484692 cm
/F1.1[ 11 0 0 -11 0 0]sf
-24 11 m
(&'\(\)*+,-.)[ 7.942000 6.116000 6.116000 3.058000 6.116000 3.058000 3.663000 9.163000 0.000000 ] xS
3.1481071 0 0 -3.1421101 56.004459 603.49609 cm
44.25 158.5 m
44.25 14 l
S
188.75 158.5 m
188.75 14 l
S
44.25 158.5 m
45.695 158.5 l
S
44.25 129.60001 m
45.695 129.60001 l
S
44.25 100.7 m
45.695 100.7 l
S
44.25 71.800003 m
45.695 71.800003 l
S
44.25 42.900002 m
45.695 42.900002 l
S
44.25 14 m
45.695 14 l
S
188.75 158.5 m
187.30499 158.5 l
S
188.75 129.60001 m
187.30499 129.60001 l
S
188.75 100.7 m
187.30499 100.7 l
S
188.75 71.800003 m
187.30499 71.800003 l
S
188.75 42.900002 m
187.30499 42.900002 l
S
188.75 14 m
187.30499 14 l
S
3.1481071 0 0 -3.1421101 182.71581 105.4716 cm
/F1.1[ 10 0 0 -10 0 0]sf
-21 3.5 m
(!#/%)[ 3.330000 5.560000 5.560000 0.000000 ] xS
3.1481071 0 0 -3.1421101 182.71581 196.27859 cm
-21 3.5 m
(!#%%)[ 3.330000 5.560000 5.560000 0.000000 ] xS
3.1481071 0 0 -3.1421101 182.71581 287.0856 cm
-21 3.5 m
(!$/%)[ 3.330000 5.560000 5.560000 0.000000 ] xS
3.1481071 0 0 -3.1421101 182.71581 377.89261 cm
-21 3.5 m
(!$%%)[ 3.330000 5.560000 5.560000 0.000000 ] xS
3.1481071 0 0 -3.1421101 182.71581 468.69958 cm
-16 3.5 m
(!/%)[ 3.330000 5.560000 0.000000 ] xS
3.1481071 0 0 -3.1421101 182.71581 559.50659 cm
-6 3.5 m
(%)s
0 3.1421101 3.1481071 0 96.929848 91.332123 cm
/F1.1[ 11 0 0 -11 0 0]sf
0 0 m
(&012-34+5617'182\)361+,9:;-)[ 7.942000 5.500000 6.116000 6.116000 9.163000 2.442000 5.500000 3.058000 7.942000 6.116000 6.116000 6.116000 6.116000 6.116000 5.500000 6.116000 3.058000 2.442000 6.116000 6.116000 3.058000 3.663000 5.500000 6.116000 3.058000 0.000000 ] xS
0 3.1421101 3.1481071 0 81.189323 550.0802 cm
/F1.1[ 8 0 0 -8 0 0]sf
0 0 m
(")s
0 3.1421101 3.1481071 0 96.929848 565.79077 cm
/F1.1[ 11 0 0 -11 0 0]sf
0 0 m
(.)s
1 w
0 J
2 j
1 M
[
1
3
] 0 d
/Cs2 SC
0 0 1 sc
3.1481071 0 0 -3.1421101 56.004459 603.49609 cm
188.75 57.62207 m
185.0797 41.800991 l
181.40939 30.921181 l
177.73911 24.515499 l
174.0688 19.70978 l
170.3985 16.61499 l
166.7282 15.2281 l
163.05791 18.82114 l
159.3876 21.57163 l
155.7173 23.05356 l
152.047 23.36603 l
148.37669 22.839411 l
144.70641 21.9238 l
141.0361 20.740749 l
137.3658 19.57506 l
133.6955 18.48996 l
130.02521 17.544399 l
126.3549 16.790819 l
122.6846 16.215099 l
119.0143 15.8108 l
115.344 15.55438 l
111.6737 15.37833 l
108.0034 15.23563 l
104.3331 15.12162 l
100.6628 15.05486 l
96.9925 14.99439 l
93.322197 14.92128 l
89.651901 14.83735 l
85.981598 14.6681 l
82.311302 14.22688 l
78.640999 14.03468 l
74.970703 14.03467 l
71.3004 14.03468 l
S
[
8
3
2
3
] 0 d
0 1 1 sc
188.75 50.021881 m
185.0797 36.03215 l
181.40939 29.00754 l
177.73911 24.152399 l
174.0688 20.072121 l
170.3985 17.869431 l
166.7282 18.75927 l
163.05791 20.958191 l
159.3876 22.111191 l
155.7173 22.726351 l
152.047 22.58359 l
148.37669 22.166969 l
144.70641 21.435619 l
141.0361 20.55151 l
137.3658 19.61339 l
133.6955 18.765671 l
130.02521 18.03228 l
126.3549 17.35124 l
122.6846 16.78734 l
119.0143 16.348721 l
115.344 16.00658 l
111.6737 15.71318 l
108.0034 15.48336 l
104.3331 15.30712 l
100.6628 15.19725 l
96.9925 15.0733 l
93.322197 14.96779 l
89.651901 14.84535 l
85.981598 14.62956 l
82.311302 14.27133 l
78.640999 14.03482 l
74.970703 14.03483 l
71.3004 14.03481 l
S
[
10
6
] 0 d
1 0 0 sc
188.75 93.741463 m
186.215 62.987 l
181.40939 33.880661 l
176.60381 23.45562 l
174.0688 18.84104 l
171.5338 17.030161 l
166.7282 16.28577 l
161.92261 14.03057 l
159.3876 18.59058 l
156.8526 21.49065 l
152.047 23.937269 l
147.24139 23.252569 l
144.70641 22.4981 l
142.1714 21.53203 l
137.3658 18.93331 l
132.5602 17.312429 l
130.02521 17.12351 l
127.4902 16.74692 l
122.6846 15.92918 l
117.879 15.56172 l
115.344 15.64069 l
112.809 15.42426 l
108.0034 14.8211 l
103.1978 14.74163 l
100.6628 14.93477 l
98.127777 14.87255 l
93.322197 14.74326 l
88.516609 14.6689 l
85.981598 14.17833 l
83.446587 14.03395 l
78.640999 14.0346 l
73.835411 14.03453 l
71.3004 14.03437 l
S
1 j
10 M
[] 0 d
0 1 0 sc
188.75 136.532 m
188.01401 112.9929 l
186.3802 59.935799 l
184.07491 37.452 l
181.40939 26.75293 l
178.7439 21.094721 l
176.4386 16.833429 l
174.80479 14.03366 l
174.0688 14.03149 l
173.33279 14.02971 l
171.69901 14.03452 l
169.39371 14.03268 l
166.7282 14.03873 l
164.0627 14.0319 l
161.7574 14.0332 l
160.1236 14.0306 l
159.3876 14.031 l
158.6516 14.65571 l
157.01781 19.93519 l
154.71249 23.99905 l
152.047 25.111641 l
149.3815 25.131821 l
147.0762 23.93611 l
145.4424 22.66324 l
144.70641 21.93767 l
143.9704 21.037609 l
142.33659 20.1005 l
140.0313 18.59202 l
137.3658 17.413271 l
134.7003 16.43189 l
132.395 15.6379 l
130.7612 15.28204 l
130.02521 15.14284 l
129.2892 14.98023 l
127.6554 14.71761 l
125.3501 14.45965 l
122.6846 14.3047 l
120.0191 14.20045 l
117.7138 14.17274 l
116.08 14.18341 l
115.344 14.20446 l
114.608 14.21551 l
112.9742 14.27252 l
110.6689 14.30412 l
108.0034 14.32362 l
105.3379 14.33973 l
103.0326 14.51336 l
101.3988 14.28114 l
100.6628 14.29313 l
99.926811 14.33452 l
98.292999 14.45147 l
95.98774 14.40905 l
93.322197 14.42365 l
90.656647 14.27091 l
88.351402 14.03546 l
86.71759 14.03528 l
85.981598 14.03428 l
85.245613 14.0336 l
83.611801 14.03178 l
81.306541 14.03234 l
78.640999 14.03398 l
75.975456 14.0346 l
73.670197 14.03431 l
72.036377 14.03436 l
71.3004 14.03442 l
S
/Cs1 SC
1 sc
CM
227.57629 136.8927 m
227.57629 311.27979 l
507.75781 311.27979 l
507.75781 136.8927 l
h
f
0 sc
3.1481071 0 0 -3.1421101 344.05621 285.35739 cm
/F1.1[ 10 0 0 -10 0 0]sf
0 3.5 m
(5<=>+?@$)[ 7.220000 6.670000 6.670000 6.670000 2.780000 7.220000 5.840000 0.000000 ] xS
2 j
1 M
[
1
3
] 0 d
/Cs2 SC
0 0 1 sc
3.1481071 0 0 -3.1421101 56.004459 603.49609 cm
58.5 101.25 m
88.5 101.25 l
S
/Cs1 SC
0 sc
3.1481071 0 0 -3.1421101 344.05621 244.50999 cm
0 3.5 m
(5<A>+?@$)[ 7.220000 6.670000 6.110000 6.670000 2.780000 7.220000 5.840000 0.000000 ] xS
[
8
3
2
3
] 0 d
/Cs2 SC
0 1 1 sc
3.1481071 0 0 -3.1421101 56.004459 603.49609 cm
58.5 114.25 m
88.5 114.25 l
S
/Cs1 SC
0 sc
3.1481071 0 0 -3.1421101 344.05621 203.6626 cm
0 3.5 m
(5<=>+?@B)[ 7.220000 6.670000 6.670000 6.670000 2.780000 7.220000 5.840000 0.000000 ] xS
[
10
6
] 0 d
/Cs2 SC
1 0 0 sc
3.1481071 0 0 -3.1421101 56.004459 603.49609 cm
58.5 127.25 m
88.5 127.25 l
S
/Cs1 SC
0 sc
3.1481071 0 0 -3.1421101 344.05621 162.81509 cm
0 3.5 m
(5<=>+?@C)[ 7.220000 6.670000 6.670000 6.670000 2.780000 7.220000 5.840000 0.000000 ] xS
1 j
10 M
[] 0 d
/Cs2 SC
0 1 0 sc
3.1481071 0 0 -3.1421101 56.004459 603.49609 cm
58.5 140.25 m
88.5 140.25 l
S
0.5 w
0 j
/Cs1 SC
0.149 sc
54.5 148.5 m
54.5 93 l
143.5 93 l
143.5 148.5 l
h
S
ep
end
%%Trailer
%%Pages: 1
%%BoundingBox: 0 0 612 792
%%EOF
